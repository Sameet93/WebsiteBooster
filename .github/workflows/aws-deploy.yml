name: Build, Test, and Deploy to AWS

on:
  push:
    branches: [ main ]  # Adjust this to match your default branch
  pull_request:
    branches: [ main ]  # Run tests on PRs
  workflow_dispatch:  # Allows manual triggering

env:
  AWS_REGION: us-east-1  # Change this to your desired region
  ECR_REPOSITORY: trepidus-tech-website
  ECS_CLUSTER: production  # Change this to your cluster name
  ECS_SERVICE: trepidus-tech-website  # Change this to your service name
  CONTAINER_NAME: trepidus-tech-website  # Change this to your container name
  NODE_VERSION: '20'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check types
      run: npm run check
      
    - name: Run linter (if available)
      run: npm run lint
      continue-on-error: true  # Won't fail the workflow if linting fails
      
    - name: Test API endpoints
      run: |
        npm run dev &
        sleep 10
        chmod +x ./tests/api.sh
        ./tests/api.sh
        pkill -f "npm run dev" || true

  build:
    name: Build and Test Docker Image
    needs: lint-and-test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        load: true
        tags: trepidus-tech-website:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run -d -p 5000:5000 --name test-container trepidus-tech-website:test
        sleep 10
        curl -s http://localhost:5000/health | grep "healthy" || exit 1
        docker logs test-container
        docker stop test-container
        docker rm test-container

  deploy:
    name: Deploy to AWS
    needs: build
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production  # Create this environment in GitHub repo settings
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: aws-ecs-task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        
    - name: Post-deployment verification
      run: |
        # Wait for service to become stable
        sleep 30
        
        # Get the load balancer URL (assumes you've set up ECS with ALB)
        LB_URL=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }} | jq -r '.services[0].loadBalancers[0].targetGroupArn')
        if [ "$LB_URL" != "null" ]; then
          TG_ARN=$LB_URL
          LB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TG_ARN --region ${{ env.AWS_REGION }} | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
          LB_DNS=$(aws elbv2 describe-load-balancers --load-balancer-arns $LB_ARN --region ${{ env.AWS_REGION }} | jq -r '.LoadBalancers[0].DNSName')
          
          # Check health endpoint
          curl -s "http://$LB_DNS/health" | grep "healthy" || exit 1
          echo "Deployment verified successfully at http://$LB_DNS"
        else
          echo "No load balancer found. Skipping verification."
        fi
        
  cleanup:
    name: Clean up old images
    needs: deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'  # Only run manually to avoid unintended deletions
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Clean up old images
      run: |
        # Keep only the 5 most recent images
        aws ecr describe-images \
          --repository-name ${{ env.ECR_REPOSITORY }} \
          --query 'sort_by(imageDetails,& imagePushedAt)[-5].imageDigest' \
          --output text \
          --region ${{ env.AWS_REGION }} > /tmp/images-to-keep.txt
          
        aws ecr describe-images \
          --repository-name ${{ env.ECR_REPOSITORY }} \
          --query 'imageDetails[*].imageDigest' \
          --output text \
          --region ${{ env.AWS_REGION }} > /tmp/all-images.txt
          
        grep -v -f /tmp/images-to-keep.txt /tmp/all-images.txt > /tmp/images-to-delete.txt
        
        if [ -s /tmp/images-to-delete.txt ]; then
          while read digest; do
            aws ecr batch-delete-image \
              --repository-name ${{ env.ECR_REPOSITORY }} \
              --image-ids imageDigest=$digest \
              --region ${{ env.AWS_REGION }}
            echo "Deleted image with digest: $digest"
          done < /tmp/images-to-delete.txt
        else
          echo "No images to delete"
        fi